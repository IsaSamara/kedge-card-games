@page "/cards-yugioh"
@using KedgeCardGames.Services
@inject ISnackbar Snackbar
@inject IYgoproDeck _yugiohApi

<PageTitle>Yu-Gi-Oh!</PageTitle>

<MudContainer Class="mt-8" MaxWidth="MaxWidth.ExtraLarge">

    <MudTextField @bind-Value="_search" Label="Pesquisar" Variant="Variant.Outlined" Adornment="Adornment.End"
                  AdornmentIcon="@Icons.Material.Filled.Search" AdornmentColor="Color.Secondary" OnKeyUp="HandleKeyDown" />

    <div class="d-flex justify-center mt-4 mb-4">
        <MudPagination Color="Color.Primary" Count="@_totalPaginas"
        Selected="@_paginaAtual" SelectedChanged="TrocarPagina" />
    </div>
    <MudGrid>
        @if (cartas == null || !cartas.Any())
        {
            @for (int i = 0; i < 18; i++)
            {
                <CardSkeleton />
            }
        }
        else
        {
            @foreach (var carta in cartas)
            {
                <MudItem xs="2" lg="2">
                    <MudCard Style="height: 100%; display: flex; flex-direction: column;">
                        <MudCardMedia Image="@carta.Imagens[0].UrlImagem"
                                Style="height: 400px; object-fit: contain;" />
                        <MudCardContent Style="flex-grow: 1; display: flex; flex-direction: column; justify-content: space-between;">
                            <MudText Typo="Typo.h6" Class="mb-2" TextOverflow="TextOverflow.Ellipsis">
                                @carta.Nome
                            </MudText>

                            <MudGrid Class="d-flex align-items-center justify-space-between" Style="margin-top: auto;">
                                <MudItem xs="6" Class="d-flex align-items-center">
                                    <MudIcon Icon="@Icons.Material.Filled.LocalOffer" Class="mr-1" />
                                    <MudText Typo="Typo.body2">@_random.Next(1, 30) un.</MudText>
                                </MudItem>

                                <MudItem xs="6" Class="d-flex align-items-center justify-end">
                                    <MudText Typo="Typo.body2">@decimal.Parse(@carta.Precos.FirstOrDefault().PrecoCardMarket).ToString("C") </MudText>
                                </MudItem>
                            </MudGrid>

                            <MudIconButton Icon="@Icons.Material.Outlined.FavoriteBorder"
                                           OnClick="@(() => AdicionarWishlist(carta))"
                                           Color="Color.Secondary"
                                           Class="mt-2 align-self-end" />
      
                        </MudCardContent>
                    </MudCard>
                </MudItem>
            }
        }
    </MudGrid>
    <div class="d-flex justify-center mt-4 mb-4">
        <MudPagination Color="Color.Primary" Count="@_totalPaginas"
        Selected="@_paginaAtual" SelectedChanged="TrocarPagina" />
    </div>
</MudContainer>

@code {
    private List<CartaYgoDto>? cartas = new();
    private int _paginaAtual = 1;
    private int _totalPaginas = 762;
    private int _itensPorPagina = 18;
    private Random _random = new Random();
    public string _search = string.Empty;

       protected override async Task OnInitializedAsync()
    {
        await CarregarPagina(_paginaAtual);
    }

    private async Task CarregarPagina(int novaPagina)
    { 
        int offset = (novaPagina - 1) * _itensPorPagina;
        var resultado = await _yugiohApi.ObterCardsYuGiOh(18, offset);
        cartas = resultado.Cartas;
    }

    private async Task TrocarPagina(int novaPagina)
    {
        _paginaAtual = novaPagina;
        cartas = null;
        await CarregarPagina(_paginaAtual);
    }

    private async Task CarregarPaginaFiltro(int pagina)
    {
        _search = _search.Replace(" ", "");
        string? query = string.IsNullOrEmpty(_search) ? null : $"name:{_search}";
        var resultado = await _yugiohApi.ObterCardsYuGiOh(18, pagina, _search);
        cartas = resultado.Cartas;
    }


    private async Task HandleKeyDown(KeyboardEventArgs args)
    {
        if (args.Key == "Enter")
        {
            _paginaAtual = 1;
            cartas = null;
            await CarregarPaginaFiltro(_paginaAtual);
        }
    }

    private void AdicionarWishlist(CartaYgoDto carta)
    {
        WishlistService.Adicionar(carta);

        Snackbar.Add($"“{carta.Nome}” adicionada à lista de desejos!", Severity.Success, config =>
        {
            config.VisibleStateDuration = 3000;
            config.ShowCloseIcon = true;
            config.RequireInteraction = false;
        });
    }
}